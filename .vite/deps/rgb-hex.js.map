{
  "version": 3,
  "sources": ["../../node_modules/rgb-hex/index.js"],
  "sourcesContent": ["// TODO: Remove this ignore comment.\n// eslint-disable-next-line no-mixed-operators\nconst toHex = (red, green, blue, alpha) => ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1) + alpha;\n\nexport default function rgbHex(red, green, blue, alpha) {\n\tlet isPercent = (red + (alpha || '')).toString().includes('%');\n\n\tif (typeof red === 'string' && !green) { // Single string parameter.\n\t\tconst parsed = parseCssRgbString(red);\n\t\tif (!parsed) {\n\t\t\tthrow new TypeError('Invalid or unsupported color format.');\n\t\t}\n\n\t\tisPercent = false;\n\t\t[red, green, blue, alpha] = parsed;\n\t} else if (alpha !== undefined) {\n\t\talpha = Number.parseFloat(alpha);\n\t}\n\n\tif (typeof red !== 'number' ||\n\t\ttypeof green !== 'number' ||\n\t\ttypeof blue !== 'number' ||\n\t\tred > 255 ||\n\t\tgreen > 255 ||\n\t\tblue > 255\n\t) {\n\t\tthrow new TypeError('Expected three numbers below 256');\n\t}\n\n\tif (typeof alpha === 'number') {\n\t\tif (!isPercent && alpha >= 0 && alpha <= 1) {\n\t\t\talpha = Math.round(255 * alpha);\n\t\t} else if (isPercent && alpha >= 0 && alpha <= 100) {\n\t\t\talpha = Math.round(255 * alpha / 100);\n\t\t} else {\n\t\t\tthrow new TypeError(`Expected alpha value (${alpha}) as a fraction or percentage`);\n\t\t}\n\n\t\talpha = (alpha | 1 << 8).toString(16).slice(1); // eslint-disable-line no-mixed-operators\n\t} else {\n\t\talpha = '';\n\t}\n\n\treturn toHex(red, green, blue, alpha);\n}\n\nconst parseCssRgbString = input => {\n\tconst parts = input.replace(/rgba?\\(([^)]+)\\)/, '$1').split(/[,\\s/]+/).filter(Boolean);\n\tif (parts.length < 3) {\n\t\treturn;\n\t}\n\n\tconst parseValue = (value, max) => {\n\t\tvalue = value.trim();\n\n\t\tif (value.endsWith('%')) {\n\t\t\treturn Math.min(Number.parseFloat(value) * max / 100, max);\n\t\t}\n\n\t\treturn Math.min(Number.parseFloat(value), max);\n\t};\n\n\tconst red = parseValue(parts[0], 255);\n\tconst green = parseValue(parts[1], 255);\n\tconst blue = parseValue(parts[2], 255);\n\tlet alpha;\n\n\tif (parts.length === 4) {\n\t\talpha = parseValue(parts[3], 1);\n\t}\n\n\treturn [red, green, blue, alpha];\n};\n"],
  "mappings": ";;;AAEA,IAAM,QAAQ,CAAC,KAAK,OAAO,MAAM,WAAY,OAAO,SAAS,IAAI,OAAO,KAAM,KAAK,IAAI,SAAS,EAAE,EAAE,MAAM,CAAC,IAAI;AAEhG,SAAR,OAAwB,KAAK,OAAO,MAAM,OAAO;AACvD,MAAI,aAAa,OAAO,SAAS,KAAK,SAAS,EAAE,SAAS,GAAG;AAE7D,MAAI,OAAO,QAAQ,YAAY,CAAC,OAAO;AACtC,UAAM,SAAS,kBAAkB,GAAG;AACpC,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,UAAU,sCAAsC;AAAA,IAC3D;AAEA,gBAAY;AACZ,KAAC,KAAK,OAAO,MAAM,KAAK,IAAI;AAAA,EAC7B,WAAW,UAAU,QAAW;AAC/B,YAAQ,OAAO,WAAW,KAAK;AAAA,EAChC;AAEA,MAAI,OAAO,QAAQ,YAClB,OAAO,UAAU,YACjB,OAAO,SAAS,YAChB,MAAM,OACN,QAAQ,OACR,OAAO,KACN;AACD,UAAM,IAAI,UAAU,kCAAkC;AAAA,EACvD;AAEA,MAAI,OAAO,UAAU,UAAU;AAC9B,QAAI,CAAC,aAAa,SAAS,KAAK,SAAS,GAAG;AAC3C,cAAQ,KAAK,MAAM,MAAM,KAAK;AAAA,IAC/B,WAAW,aAAa,SAAS,KAAK,SAAS,KAAK;AACnD,cAAQ,KAAK,MAAM,MAAM,QAAQ,GAAG;AAAA,IACrC,OAAO;AACN,YAAM,IAAI,UAAU,yBAAyB,KAAK,+BAA+B;AAAA,IAClF;AAEA,aAAS,QAAQ,KAAK,GAAG,SAAS,EAAE,EAAE,MAAM,CAAC;AAAA,EAC9C,OAAO;AACN,YAAQ;AAAA,EACT;AAEA,SAAO,MAAM,KAAK,OAAO,MAAM,KAAK;AACrC;AAEA,IAAM,oBAAoB,WAAS;AAClC,QAAM,QAAQ,MAAM,QAAQ,oBAAoB,IAAI,EAAE,MAAM,SAAS,EAAE,OAAO,OAAO;AACrF,MAAI,MAAM,SAAS,GAAG;AACrB;AAAA,EACD;AAEA,QAAM,aAAa,CAAC,OAAO,QAAQ;AAClC,YAAQ,MAAM,KAAK;AAEnB,QAAI,MAAM,SAAS,GAAG,GAAG;AACxB,aAAO,KAAK,IAAI,OAAO,WAAW,KAAK,IAAI,MAAM,KAAK,GAAG;AAAA,IAC1D;AAEA,WAAO,KAAK,IAAI,OAAO,WAAW,KAAK,GAAG,GAAG;AAAA,EAC9C;AAEA,QAAM,MAAM,WAAW,MAAM,CAAC,GAAG,GAAG;AACpC,QAAM,QAAQ,WAAW,MAAM,CAAC,GAAG,GAAG;AACtC,QAAM,OAAO,WAAW,MAAM,CAAC,GAAG,GAAG;AACrC,MAAI;AAEJ,MAAI,MAAM,WAAW,GAAG;AACvB,YAAQ,WAAW,MAAM,CAAC,GAAG,CAAC;AAAA,EAC/B;AAEA,SAAO,CAAC,KAAK,OAAO,MAAM,KAAK;AAChC;",
  "names": []
}
